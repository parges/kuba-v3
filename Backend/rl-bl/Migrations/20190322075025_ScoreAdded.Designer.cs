// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rl_bl.Context;

namespace kubaapi.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20190322075025_ScoreAdded")]
    partial class ScoreAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("rl_contract.Models.Patient", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("AnamneseDate");

                    b.Property<bool?>("AnamnesePayed");

                    b.Property<string>("Avatar");

                    b.Property<DateTime>("Birthday");

                    b.Property<DateTime?>("DiagnostikDate");

                    b.Property<bool?>("DiagnostikPayed");

                    b.Property<DateTime?>("ElternDate");

                    b.Property<bool?>("ElternPayed");

                    b.Property<string>("Firstname");

                    b.Property<string>("Lastname");

                    b.Property<string>("ProblemHierarchy");

                    b.Property<string>("Tele");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new { Id = 1, Birthday = new DateTime(1988, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), Firstname = "Kleiner", Lastname = "Hase", Tele = "0177123456" },
                        new { Id = 2, Birthday = new DateTime(1988, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), Firstname = "Stefan", Lastname = "Parge", Tele = "0177123457" }
                    );
                });

            modelBuilder.Entity("rl_contract.Models.Review", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Exercises");

                    b.Property<string>("Name");

                    b.Property<int?>("PatientId");

                    b.Property<bool>("Payed");

                    b.Property<string>("Reasons");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new { Id = 1, Date = new DateTime(2019, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Exercises = "Liegestütze und dann Kaffee trinken", Name = "Befundgespräch", PatientId = 1, Payed = true, Reasons = "Das war dringend notwendig" },
                        new { Id = 2, Date = new DateTime(2019, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), Exercises = "Liegestütze und dann Kaffee trinken", Name = "1. Review", PatientId = 1, Payed = true, Reasons = "Das war dringend notwendig" },
                        new { Id = 3, Date = new DateTime(2019, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Exercises = "Liegestütze und dann Kaffee trinken", Name = "2. Review", PatientId = 1, Payed = false, Reasons = "Das war dringend notwendig" },
                        new { Id = 4, Date = new DateTime(2019, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), Exercises = "Liegestütze und dann Kaffee trinken", Name = "Befundgespräch", PatientId = 2, Payed = true, Reasons = "Das war dringend notwendig" },
                        new { Id = 5, Date = new DateTime(2019, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), Exercises = "Liegestütze und dann Kaffee trinken", Name = "1. Review", PatientId = 2, Payed = false, Reasons = "Das war dringend notwendig" },
                        new { Id = 6, Date = new DateTime(2019, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Exercises = "Liegestütze und dann Kaffee trinken", Name = "2. Review", PatientId = 2, Payed = false, Reasons = "Das war dringend notwendig" }
                    );
                });

            modelBuilder.Entity("rl_contract.Models.Testung", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name");

                    b.Property<int?>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique()
                        .HasFilter("[PatientId] IS NOT NULL");

                    b.ToTable("Testungen");

                    b.HasData(
                        new { Id = 1, Date = new DateTime(2019, 3, 22, 8, 50, 25, 17, DateTimeKind.Local), Name = "Erste Testung", PatientId = 1 }
                    );
                });

            modelBuilder.Entity("rl_contract.Models.TestungChapter", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("Score");

                    b.Property<int?>("TestungId");

                    b.HasKey("Id");

                    b.HasIndex("TestungId");

                    b.ToTable("TestungChapters");

                    b.HasData(
                        new { Id = 1, Name = "I. TESTS ZUR ÜBERPRÜFUNG DER GROBMOTORISCHEN KOORDINAION UND DES GLEICHGEWICHTS", TestungId = 1 },
                        new { Id = 2, Name = "II. TESTS ZUR MOTORISCHEN ENTWICKLUNG", TestungId = 1 },
                        new { Id = 3, Name = "III. TESTS ZUR ÜBERPRÜFUNG VON KLEINHIRNFUNKTIONEN", TestungId = 1 },
                        new { Id = 4, Name = "IV. TESTS ZUR DYSDIADOCHOKINESE", TestungId = 1 },
                        new { Id = 5, Name = "V. LINKS-RECHTS-DISKRIMINIERUNGSPROBLEME", TestungId = 1 },
                        new { Id = 6, Name = "VI. ORIENTIERUNGSPROBLEME", TestungId = 1 },
                        new { Id = 7, Name = "VII. RÄUMLICHE WAHRNEHMUNGSPROBLEME", TestungId = 1 },
                        new { Id = 8, Name = "VIII. TESTS ZU ABERRANTEN REFLEXEN", TestungId = 1 },
                        new { Id = 9, Name = "IX. TESTS ZUR SEITIGKEITSÜBERPRÜFUNG", TestungId = 1 },
                        new { Id = 10, Name = "X. ÜBERPRÜFUNG DER AUGENMUSKELMOTORIK", TestungId = 1 },
                        new { Id = 11, Name = "XI. VISUELLE WAHRNEHMUNGSÜBERPRÜFUNG", TestungId = 1 },
                        new { Id = 12, Name = "ZUSÄTZLICHE BEOBACHTUNGEN UND NOTIZEN", TestungId = 1 },
                        new { Id = 13, Name = "ERGEBNISZUSAMMENFASSUNG", TestungId = 1 }
                    );
                });

            modelBuilder.Entity("rl_contract.Models.TestungQuestion", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label");

                    b.Property<int?>("TestungChapterId");

                    b.Property<string>("Type");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TestungChapterId");

                    b.ToTable("TestungQuestions");

                    b.HasData(
                        new { Id = 1, Label = "Aufrichten aus Rückenlage in den Stand", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 2, Label = "Aufrichten aus Bauchlage in den Stand", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 3, Label = "Romberg Test (Augen geöffnet)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 4, Label = "Romberg Test (Augen geschlossen)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 5, Label = "Mann Test (Augen geöffnet)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 6, Label = "Mann Test (Augen geschlossen)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 7, Label = "Einbeinstand", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 8, Label = "Marschieren und Umdrehen", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 9, Label = "Zehenspitzengang (vorwärts) 0 1", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 10, Label = "Zehenspitzengang (rückwärts)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 11, Label = "Tandem Gang (vorwärts)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 12, Label = "Tandem Gang (rückwärts)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 13, Label = "Fog Walk (vorwärts)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 14, Label = "Fog Walk (rückwärts)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 15, Label = "Slalom Gang (vorwärts)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 16, Label = "Slalom Gang (rückwärts)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 17, Label = "Fersengang (nur vorwärts)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 18, Label = "Hüpfen auf einem Bein (links oder rechts)", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 19, Label = "Hopserlauf", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 20, Label = "Windmühle", TestungChapterId = 1, Type = "radio", Value = "" },
                        new { Id = 21, Label = "Kriechen auf dem Bauch", TestungChapterId = 2, Type = "radio2", Value = "" },
                        new { Id = 22, Label = "Krabbeln auf Händen und Knien", TestungChapterId = 2, Type = "radio3", Value = "" },
                        new { Id = 23, Label = "Ferse auf Schienbein (linke Ferse auf rechtes Schienbein)", TestungChapterId = 3, Type = "radio", Value = "" },
                        new { Id = 24, Label = "Ferse auf Schienbein (rechte Ferse auf linkes Schienbein)", TestungChapterId = 3, Type = "radio", Value = "" },
                        new { Id = 25, Label = "Zeigefinger-Annäherung (Augen offen)", TestungChapterId = 3, Type = "radio", Value = "" },
                        new { Id = 26, Label = "Zeigefinger-Annäherung (Augen geschlossen)", TestungChapterId = 3, Type = "radio", Value = "" },
                        new { Id = 27, Label = "Finger an die Nase (Augen offen)", TestungChapterId = 3, Type = "radio", Value = "" },
                        new { Id = 28, Label = "Finger an die Nase (Augen geschlossen)", TestungChapterId = 3, Type = "radio", Value = "" },
                        new { Id = 29, Label = "Finger (linke Hand)", TestungChapterId = 4, Type = "radio", Value = "" },
                        new { Id = 30, Label = "Finger (rechte Hand)", TestungChapterId = 4, Type = "radio", Value = "" },
                        new { Id = 31, Label = "Hand (links)", TestungChapterId = 4, Type = "radio", Value = "" },
                        new { Id = 32, Label = "Hand (rechts)", TestungChapterId = 4, Type = "radio", Value = "" },
                        new { Id = 33, Label = "Fuß (links)", TestungChapterId = 4, Type = "radio", Value = "" },
                        new { Id = 34, Label = "Fuß (rechts)", TestungChapterId = 4, Type = "radio", Value = "" },
                        new { Id = 35, Label = "Links-Rechts-Diskriminierungsprobleme", TestungChapterId = 5, Type = "radioYesNo", Value = "" },
                        new { Id = 36, Label = "Orientierungsprobleme", TestungChapterId = 6, Type = "radioYesNo", Value = "" },
                        new { Id = 37, Label = "Räumliche Wahrnehmungsprobleme", TestungChapterId = 7, Type = "radioYesNo", Value = "" },
                        new { Id = 38, Label = "Standard Test - linker Arm", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 39, Label = "Standard Test - linkes Bein", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 40, Label = "Standard Test - rechter Arm", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 41, Label = "Standard Test - rechtes Bein", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 42, Label = "Ayres Test Nr. 1 - linker Arm", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 43, Label = "Ayres Test Nr. 1 - rechter Arm", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 44, Label = "Ayres Test Nr. 2 - linker Arm", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 45, Label = "Ayres Test Nr. 2 - rechter Arm", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 46, Label = "Schilder Test - linker Arm", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 47, Label = "Schilder Test - rechter Arm", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 48, Label = "TTNR - von rechts nach links", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 49, Label = "TTNR - von links nach rechts", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 50, Label = "STNR - Füße oder Rumpf", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 51, Label = "STNR - Arme", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 52, Label = "STNR - Krabbeltest", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 53, Label = "Spinaler Galant-Reflex - linke Seite", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 54, Label = "Spinaler Galant-Reflex - rechte Seite", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 55, Label = "TLR - Standard Test", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 56, Label = "TLR - Aufrechttest - Beugung", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 57, Label = "TLR - Aufrechttest – Streckung", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 58, Label = "Moro Reflex / FPR - Standard Test", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 59, Label = "Moro Reflex / FPR - Aufrecht: TT", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 60, Label = "Moro Reflex / FPR - Aufrecht: ZT", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 61, Label = "Moro Reflex / FPR - Aufrecht: FF", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 62, Label = "Augenkopfstellreaktionen - nach links", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 63, Label = "Augenkopfstellreaktionen - nach rechts", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 64, Label = "Augenkopfstellreaktionen - vorwärts", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 65, Label = "Augenkopfstellreaktionen - rückwärts", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 66, Label = "Labyrinthkopfstellreaktionen - nach links", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 67, Label = "Labyrinthkopfstellreaktionen - nach rechts", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 68, Label = "Labyrinthkopfstellreaktionen - rückwärts", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 69, Label = "Labyrinthkopfstellreaktionen - vorwärts", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 70, Label = "Amphibien Reaktion - linke Seite (Rückenlage)", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 71, Label = "Amphibien Reaktion - rechte Seite (Rückenlage)", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 72, Label = "Amphibien Reaktion - linke Seite (Bauchlage)", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 73, Label = "Amphibien Reaktion - rechte Seite (Bauchlage)", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 74, Label = "Segmentäre Rollreaktion- von den Schultern (links)", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 75, Label = "Segmentäre Rollreaktion- von den Schultern (rechts)", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 76, Label = "Segmentäre Rollreaktion- von den Hüften (links)", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 77, Label = "Segmentäre Rollreaktion- von den Hüften (rechts)", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 78, Label = "Babinski Reflex - linker Fuß", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 79, Label = "Babinski Reflex - rechter Fuß", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 80, Label = "Abdominal Reflex (optional)", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 81, Label = "Such-Reflex - links", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 82, Label = "Such-Reflex - rechts", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 83, Label = "Saug-Reflex", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 84, Label = "Erwachsener Saug-Reflex", TestungChapterId = 8, Type = "radio4", Value = "" },
                        new { Id = 85, Label = "Palmar-Reflex - linke Hand", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 86, Label = "Palmar-Reflex - rechte Hand", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 87, Label = "Plantar-Reflex - linker Fuß", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 88, Label = "Plantar-Reflex - rechter Fuß", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 89, Label = "Landau-Reaktion", TestungChapterId = 8, Type = "radio", Value = "" },
                        new { Id = 90, Label = "Fußdominanz - Ball schießen", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 91, Label = "Fußdominanz - Aufstampfen mit einem Fuß", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 92, Label = "Fußdominanz - Auf einen Stuhl steigen", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 93, Label = "Fußdominanz - Auf einem Bein hüpfen", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 94, Label = "Handdominanz - Einen Ball fangen", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 95, Label = "Handdominanz - Klatschen in eine Hand", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 96, Label = "Handdominanz - Schreibhand", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 97, Label = "Handdominanz - Teleskop", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 98, Label = "Augendominanz (Entfernung) - Teleskop", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 99, Label = "Augendominanz (Entfernung) - Ring", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 100, Label = "Augendominanz (Nähe) - Lochkarte", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 101, Label = "Augendominanz (Nähe) - Ring", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 102, Label = "Ohrdominanz - Muschel", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 103, Label = "Ohrdominanz - Lauschen", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 104, Label = "Ohrdominanz - Rufen (Hinweis auf Hemisphärendominanz)", TestungChapterId = 9, Type = "radioLeftRight", Value = "" },
                        new { Id = 105, Label = "Fixierungsschwierigkeiten", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 106, Label = "Beeinträchtigte Folgebewegungen (tracking- horizontal)", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 107, Label = "Beeinträchtigte Folgebewegungen (tracking-vertikal)", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 108, Label = "Verfolgen der Hand mit den Augen (eye-hand-tracking)", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 109, Label = "Augenzittern (Nystagmus)", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 110, Label = "Latente Konvergenz - links", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 111, Label = "Latente Konvergenz - rechts", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 112, Label = "Latente Divergenz - links", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 113, Label = "Latente Divergenz - rechts", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 114, Label = "Konvergenzschwierigkeiten - linkes Auge", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 115, Label = "Konvergenzschwierigkeiten - rechtes Auge", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 116, Label = "Schwierigkeit, die Augen unabhängig voneinander zu schließen - linkes Auge", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 117, Label = "Schwierigkeit, die Augen unabhängig voneinander zu schließen - rechtes Auge", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 118, Label = "Beeinträchtigung synchroner Augenbewegungen - linkes Auge", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 119, Label = "Beeinträchtigung synchroner Augenbewegungen - rechtes Auge", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 120, Label = "Erweiterte periphere Sicht - linkes Auge", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 121, Label = "Erweiterte periphere Sicht - rechtes Auge", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 122, Label = "Akkommodationsfähigkeit", TestungChapterId = 10, Type = "radio", Value = "" },
                        new { Id = 123, Label = "Pupillenreaktion auf Licht (optional) - linkes Auge", TestungChapterId = 10, Type = "input", Value = "" },
                        new { Id = 124, Label = "Pupillenreaktion auf Licht (optional) - rechtes Auge", TestungChapterId = 10, Type = "input", Value = "" },
                        new { Id = 125, Label = "Pupillenreaktion auf Licht (optional) - linkes Auge", TestungChapterId = 10, Type = "input", Value = "" },
                        new { Id = 126, Label = "Pupillenreaktion auf Licht (optional) - rechtes Auge", TestungChapterId = 10, Type = "input", Value = "" },
                        new { Id = 127, Label = "Visuelle Unterscheidungsprobleme - Tansley Standard Figuren", TestungChapterId = 11, Type = "radio", Value = "" },
                        new { Id = 128, Label = "Visuelle Unterscheidungsprobleme - Daniels und Diack Figuren", TestungChapterId = 11, Type = "radio", Value = "" },
                        new { Id = 129, Label = "Visuelle Unterscheidungsprobleme - Bender Visual Gestalt Figuren", TestungChapterId = 11, Type = "radio", Value = "" },
                        new { Id = 130, Label = "Visuo-motorische Integrationsschwierigkeit (Auge-Hand-Koordination) - Tansley Standard Figuren", TestungChapterId = 11, Type = "radio", Value = "" },
                        new { Id = 131, Label = "Visuo-motorische Integrationsschwierigkeit (Auge-Hand-Koordination) - Daniels und Diack Figuren", TestungChapterId = 11, Type = "radio", Value = "" },
                        new { Id = 132, Label = "Visuo-motorische Integrationsschwierigkeit (Auge-Hand-Koordination) - Bender Visual Gestalt Figuren", TestungChapterId = 11, Type = "radio", Value = "" },
                        new { Id = 133, Label = "Räumliche Probleme - Tansley Standard Figuren", TestungChapterId = 11, Type = "radio", Value = "" },
                        new { Id = 134, Label = "Räumliche Probleme - Daniels und Diack Figuren", TestungChapterId = 11, Type = "radio", Value = "" },
                        new { Id = 135, Label = "Räumliche Probleme - Bender Visual Gestalt Figuren", TestungChapterId = 11, Type = "radio", Value = "" },
                        new { Id = 136, Label = "Hinweis auf ‘Stimulusgebundenheit’", TestungChapterId = 11, Type = "radio", Value = "" },
                        new { Id = 137, Label = "Abschreiben eines kurzen Textes", TestungChapterId = 11, Type = "input", Value = "" },
                        new { Id = 138, Label = "Mann-Zeichnen-Test Test (Aston Index) - Entwicklungsalter", TestungChapterId = 11, Type = "input", Value = "" },
                        new { Id = 139, Label = "Mann-Zeichnen-Test Test (Aston Index) - Chronologisches Alter", TestungChapterId = 11, Type = "input", Value = "" },
                        new { Id = 140, Label = "Stiftgriff", TestungChapterId = 12, Type = "textarea", Value = "" },
                        new { Id = 141, Label = "Sitzposition", TestungChapterId = 12, Type = "textarea", Value = "" },
                        new { Id = 142, Label = "Schnelle Ermüdbarkeit", TestungChapterId = 12, Type = "textarea", Value = "" },
                        new { Id = 143, Label = "Kind ist ängstlich und besorgt und mit seinen Ergebnissen nicht zufrieden", TestungChapterId = 12, Type = "textarea", Value = "" },
                        new { Id = 144, Label = "Index der Dysfunktion", TestungChapterId = 13, Type = "input", Value = "" },
                        new { Id = 145, Label = "Grobmotorische Koordination und Gleichgewicht", TestungChapterId = 13, Type = "textarea", Value = "" },
                        new { Id = 146, Label = "Kleinhirnfunktionen", TestungChapterId = 13, Type = "textarea", Value = "" },
                        new { Id = 147, Label = "Dysdiadochokinese", TestungChapterId = 13, Type = "textarea", Value = "" },
                        new { Id = 148, Label = "Aberrante Reflexe", TestungChapterId = 13, Type = "textarea", Value = "" },
                        new { Id = 149, Label = "Okulomotorische Funktionen", TestungChapterId = 13, Type = "textarea", Value = "" },
                        new { Id = 150, Label = "Visuelle Wahrnehmungsfunktionen", TestungChapterId = 13, Type = "textarea", Value = "" }
                    );
                });

            modelBuilder.Entity("rl_contract.Models.Review", b =>
                {
                    b.HasOne("rl_contract.Models.Patient")
                        .WithMany("Reviews")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("rl_contract.Models.Testung", b =>
                {
                    b.HasOne("rl_contract.Models.Patient")
                        .WithOne("Testung")
                        .HasForeignKey("rl_contract.Models.Testung", "PatientId");
                });

            modelBuilder.Entity("rl_contract.Models.TestungChapter", b =>
                {
                    b.HasOne("rl_contract.Models.Testung")
                        .WithMany("Chapters")
                        .HasForeignKey("TestungId");
                });

            modelBuilder.Entity("rl_contract.Models.TestungQuestion", b =>
                {
                    b.HasOne("rl_contract.Models.TestungChapter")
                        .WithMany("Questions")
                        .HasForeignKey("TestungChapterId");
                });
#pragma warning restore 612, 618
        }
    }
}
